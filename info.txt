Analyse du projet et concepts clés :

1. Classes abstraites :
- VehiculeBase est une classe abstraite. Elle déclare une fonction virtuelle pure afficherDetails(), ce qui la rend abstraite.
- Vehicule hérite de VehiculeBase et implémente afficherDetails().

2. Polymorphisme :
- Le polymorphisme est utilisé via des fonctions virtuelles telles que afficherDetails() dans VehiculeBase, redéfinies dans les classes dérivées comme Vehicule, Voiture et VoitureElectrique.
- La méthode getType() est virtuelle et redéfinie dans les classes dérivées pour identifier le type de véhicule.
- Des destructeurs virtuels sont utilisés pour assurer un nettoyage correct.

3. Héritage (classes mères et filles) :
- VehiculeBase est la classe de base.
- Vehicule hérite de VehiculeBase.
- Voiture hérite de Vehicule.
- VoitureElectrique hérite de Voiture.
- Personne est une classe de base pour Client et Employe.
- Mecanicien est une classe de base pour MecanicienSpecialiste.

4. Gestion des fichiers :
- Les classes comme Voiture et VoitureElectrique possèdent des méthodes pour sauvegarder et charger depuis des fichiers (sauvegarderDansFichier, chargerDepuisFichier).
- Les flux de fichiers (ifstream, ofstream) sont utilisés avec gestion d'erreurs pour lire/écrire les données.
- Les fichiers servent à persister les données telles que les véhicules, mécaniciens, etc.

5. Gestion des erreurs :
- Les opérations sur fichiers utilisent des blocs try-catch pour gérer les exceptions.
- Des erreurs d'exécution sont levées et capturées pour gérer les échecs d'ouverture/lecture/écriture de fichiers.
- Des boucles de validation des entrées sont utilisées dans les menus pour garantir la validité des saisies utilisateur.

6. Conteneurs STL et algorithmes :
- std::vector est largement utilisé pour stocker des collections d'objets (ex : véhicules, clients, mécaniciens).
- std::map est utilisé principalement dans :
  * La gestion du stock de pièces dans la fonction menuPieces() (main.cpp), avec map<string, Piece> stock.
  * La gestion des réparations dans les factures (Facture.cpp), avec map<int, Reparation> listeReparations.
- La méthode find() de std::map est utilisée pour rechercher rapidement une clé (ex : vérifier si une pièce existe déjà dans le stock, ou trouver une réparation par ID).
- Les itérateurs sont utilisés pour parcourir les éléments des maps et vectors.
- Les boucles for classiques et for-each (range-based for) sont utilisées pour parcourir les conteneurs.
- La recherche dans std::map utilise un algorithme de recherche logarithmique (arbre binaire équilibré), garantissant une complexité en O(log n).

Résumé :
Le projet utilise les principes classiques de la POO avec héritage et polymorphisme pour modéliser les véhicules et entités associées. Il emploie la gestion de fichiers avec gestion d'exceptions pour la persistance. Les conteneurs STL comme vector et map sont utilisés pour la gestion des données, avec des algorithmes et itérateurs standards pour les opérations. La map est utilisée spécifiquement pour la gestion du stock de pièces et des réparations dans les factures, avec des recherches efficaces via find().
